{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","tarrokDeck","to","i","x","y","scale","rot","Math","random","delay","trans","r","s","Deck","cards","array","length","j","floor","splice","Select5Cards","useState","Set","gone","useSprings","from","zIndex","props","set","bind","useGesture","index","args","down","delta","xDelta","yDelta","distance","direction","xDir","yDir","velocity","leftOrRight","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","div","style","transform","interpolate","backgroundImage","element"],"mappings":"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","file":"static/js/main.42ca72ad.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { render } from 'react-dom'\nimport { useSprings, animated, interpolate } from 'react-spring/web'\nimport { useGesture } from 'react-use-gesture'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nconst tarrokDeck = [\n    // Cards from Gale Force Nine Store, in partnership with Wizards of the Coast.\n    // Recolored via AI and Photoshop\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/abjurer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/anarchist.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/artifact.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/avenger.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/beast.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/beggar.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/berserker.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/bishop.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/broken-one.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/charlatan.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/conjurer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/darklord.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/dictator.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/diviner.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/donjon.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/druid.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/elementalist.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/enchanter.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/evoker.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/executioner.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/ghost.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/guild-member.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/healer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/hooded-one.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/horseman.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/illusionist.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/innocent.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/marionette.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/mercenary.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/merchant.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/miser.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/missionary.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/mists.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/monk.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/myrmidon.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/necromancer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/paladin.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/philanthropist.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/priest.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/raven.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/rogue.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/seer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/shepherd.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/soldier.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/swashbuckler.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/tax-collector.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/tempter.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/thief.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/torturer.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/trader.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/traitor.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/transmuter.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/warrior.png?raw=true',\n    'https://github.com/amdorma/tarokka-reading/blob/master/public/images/cards/wizard.png?raw=true',\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * 4, scale: 1, rot: -5 + Math.random() * 10, delay: i * 400 })\nconst from = i => ({ x: 1120, rot: 0, scale: 2.5, y: -11000, zIndex: '0' })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1800px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\n/**\n * Returns an array of five random items from the specified array.\n * (Randomize array element order in-place. Using Durstenfeld shuffle algorithm.)\n */\nfunction Select5Cards(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1))\n        ;[array[i], array[j]] = [array[j], array[i]]\n    }\n    return array.splice(0, 5)\n}\n\nfunction Deck() {\n    const cards = Select5Cards(tarrokDeck)\n    const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n    const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n    // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n    const bind = useGesture(({ args: [index], down, delta: [xDelta, yDelta], distance, direction: [xDir, yDir], velocity }) => {\n        const trigger = velocity > 1 // If you flick hard enough it should trigger the card to fly out\n        const leftOrRight = xDir < 0 ? -1 : 1 // Direction should either point left or right\n        if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n        set(i => {\n            if (index !== i) return // We're only interested in changing spring-data for the current spring\n            const isGone = gone.has(index)\n            const x = isGone ? (20 + window.innerWidth) * xDir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n            const y = isGone ? (20 + window.innerWidth) * yDir : down ? yDelta : 0 // When a card is gone it flys out up or down, otherwise goes back to zero\n            const rot = xDelta / 10 + (isGone ? leftOrRight * 20 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n            const scale = down ? 1.3 : 1 // Active cards lift up a bit (slight enlargement / zoom in)\n            const zIndex = down ? 1 : 0 // Active cards should be on top (have a higher z-index)\n            return { x, y, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }, zIndex }\n        })\n        if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n    })\n    // Now we're just mapping the animated values to our view, that's it.\n    return props.map(({ x, y, rot, scale, zIndex }, i) => (\n        <animated.div\n            key={i}\n            style={{\n                transform: interpolate([x, y], (x, y) => `translate3d(${x + (window.innerWidth / 100) * i - window.innerWidth / 100}px,${y}px,0)`),\n                zIndex\n            }}>\n            {\n                // This is the card itself, we're binding our gesture to it (and injecting its index so we know which is which)\n            }\n            <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n        </animated.div>\n    ))\n}\n\nrender(<Deck />, document.getElementById('root'))\n\n\nconst element = <h1>Tarroka Reading</h1>;\nReactDOM.render(element, document.getElementById('head'));\n"],"sourceRoot":""}